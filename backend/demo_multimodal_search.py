#!/usr/bin/env python3
"""
Multi-Modal Search Enhancement Demo Script

This script demonstrates the advanced multi-modal search capabilities:
- Find items that match this outfit but in a different color
- Show me cheaper alternatives to this luxury item  
- Find accessories that go with this dress
- Seasonal recommendations based on current trends
- Style evolution ("make this more casual/formal")
"""

import asyncio
import json
import time
import requests
from typing import Dict, List, Any
import argparse
from datetime import datetime
import sys
import os

# Add the backend directory to the path so we can import modules
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

try:
    from app.services.multimodal_search_service import MultiModalSearchService
    from app.services.enhanced_search_service import EnhancedSearchService
except ImportError as e:
    print(f"Warning: Could not import services directly: {e}")
    print("Will use HTTP API calls instead")

class MultiModalSearchDemo:
    """Demo class for multi-modal search features"""
    
    def __init__(self, api_base_url: str = "http://localhost:8001", use_direct_service: bool = False):
        self.api_base_url = api_base_url
        self.use_direct_service = use_direct_service
        
        if use_direct_service:
            try:
                self.service = MultiModalSearchService()
                print("‚úÖ Using direct service calls")
            except Exception as e:
                print(f"‚ùå Failed to initialize direct service: {e}")
                print("Falling back to HTTP API calls")
                self.use_direct_service = False
        
        self.demo_product_id = "PROD_E17DF3C5"  # From our dataset
        
    async def demo_color_variations(self):
        """Demo: Find items in different colors"""
        print("\nüé® === COLOR VARIATIONS DEMO ===")
        print(f"Finding color variations for product: {self.demo_product_id}")
        print("Target colors: ['red', 'green', 'black']")
        
        start_time = time.time()
        
        if self.use_direct_service:
            try:
                result = await self.service.find_color_variations(
                    product_id=self.demo_product_id,
                    target_colors=['red', 'green', 'black'],
                    limit=5
                )
                self._display_color_results(result)
            except Exception as e:
                print(f"‚ùå Direct service error: {e}")
        else:
            # Use HTTP API
            try:
                response = requests.post(
                    f"{self.api_base_url}/api/v1/multimodal/color-variations",
                    json={
                        "product_id": self.demo_product_id,
                        "target_colors": ["red", "green", "black"],
                        "limit": 5
                    },
                    headers={"X-API-Key": "demo-key"},
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    self._display_color_results(result)
                else:
                    print(f"‚ùå API Error: {response.status_code} - {response.text}")
            except requests.RequestException as e:
                print(f"‚ùå HTTP Request error: {e}")
                # Show mock demo results
                self._show_mock_color_results()
        
        elapsed = time.time() - start_time
        print(f"‚è±Ô∏è  Search completed in {elapsed:.2f} seconds")
    
    async def demo_cheaper_alternatives(self):
        """Demo: Find budget-friendly alternatives"""
        print("\nüí∞ === CHEAPER ALTERNATIVES DEMO ===")
        print(f"Finding cheaper alternatives for luxury product: {self.demo_product_id}")
        print("Max price ratio: 70% of original price")
        
        start_time = time.time()
        
        if self.use_direct_service:
            try:
                result = await self.service.find_cheaper_alternatives(
                    product_id=self.demo_product_id,
                    max_price_ratio=0.7,
                    limit=5
                )
                self._display_cheaper_results(result)
            except Exception as e:
                print(f"‚ùå Direct service error: {e}")
                self._show_mock_cheaper_results()
        else:
            # Show mock demo results for HTTP API
            self._show_mock_cheaper_results()
        
        elapsed = time.time() - start_time
        print(f"‚è±Ô∏è  Search completed in {elapsed:.2f} seconds")
    
    async def demo_accessory_matching(self):
        """Demo: Find matching accessories"""
        print("\nüëú === ACCESSORY MATCHING DEMO ===")
        print(f"Finding accessories that match clothing item: {self.demo_product_id}")
        print("Looking for: bags, shoes, jewelry")
        
        start_time = time.time()
        
        if self.use_direct_service:
            try:
                result = await self.service.find_matching_accessories(
                    clothing_product_id=self.demo_product_id,
                    accessory_types=['bags', 'shoes', 'jewelry'],
                    limit=3
                )
                self._display_accessory_results(result)
            except Exception as e:
                print(f"‚ùå Direct service error: {e}")
                self._show_mock_accessory_results()
        else:
            self._show_mock_accessory_results()
        
        elapsed = time.time() - start_time
        print(f"‚è±Ô∏è  Search completed in {elapsed:.2f} seconds")
    
    async def demo_seasonal_recommendations(self):
        """Demo: Get seasonal recommendations"""
        print("\nüçÇ === SEASONAL RECOMMENDATIONS DEMO ===")
        current_season = self._get_current_season()
        print(f"Getting {current_season} recommendations")
        print("User preferences: casual style, earth tones")
        
        start_time = time.time()
        
        if self.use_direct_service:
            try:
                result = await self.service.get_seasonal_recommendations(
                    season=current_season,
                    user_preferences={
                        "preferred_styles": ["casual", "comfortable"],
                        "favorite_colors": ["earth tones", "brown", "beige"],
                        "preferred_brands": ["Michael Kors", "Nike"]
                    },
                    limit=6
                )
                self._display_seasonal_results(result)
            except Exception as e:
                print(f"‚ùå Direct service error: {e}")
                self._show_mock_seasonal_results(current_season)
        else:
            self._show_mock_seasonal_results(current_season)
        
        elapsed = time.time() - start_time
        print(f"‚è±Ô∏è  Search completed in {elapsed:.2f} seconds")
    
    async def demo_style_evolution(self):
        """Demo: Style transformation"""
        print("\n‚ú® === STYLE EVOLUTION DEMO ===")
        print(f"Transforming product style: {self.demo_product_id}")
        print("Target style: casual (intensity: 0.8)")
        
        start_time = time.time()
        
        if self.use_direct_service:
            try:
                result = await self.service.style_evolution_search(
                    product_id=self.demo_product_id,
                    target_style="casual",
                    intensity=0.8,
                    limit=5
                )
                self._display_style_results(result)
            except Exception as e:
                print(f"‚ùå Direct service error: {e}")
                self._show_mock_style_results()
        else:
            self._show_mock_style_results()
        
        elapsed = time.time() - start_time
        print(f"‚è±Ô∏è  Search completed in {elapsed:.2f} seconds")
    
    def _display_color_results(self, result: Dict[str, Any]):
        """Display color variation results"""
        ref_product = result.get("reference_product", {})
        variations = result.get("color_variations", [])
        
        print(f"\nüìã Reference Product: {ref_product.get('name', 'Unknown')}")
        print(f"   Original Color: {ref_product.get('color', 'Unknown')}")
        print(f"   Price: ${ref_product.get('price', 0):.2f}")
        
        print(f"\nüé® Found {len(variations)} color variations:")
        for i, var in enumerate(variations, 1):
            print(f"   {i}. {var.get('name', 'Unknown')}")
            print(f"      Color: {var.get('color', 'Unknown')}")
            print(f"      Price: ${var.get('price', 0):.2f}")
            print(f"      Similarity: {var.get('score', 0)*100:.1f}%")
            if var.get('color_match_reason'):
                print(f"      Matches: {', '.join(var['color_match_reason'])}")
            print()
    
    def _display_cheaper_results(self, result: Dict[str, Any]):
        """Display cheaper alternatives results"""
        ref_product = result.get("reference_product", {})
        alternatives = result.get("cheaper_alternatives", [])
        
        print(f"\nüìã Luxury Product: {ref_product.get('name', 'Unknown')}")
        print(f"   Original Price: ${result.get('reference_price', 0):.2f}")
        print(f"   Max Target Price: ${result.get('max_target_price', 0):.2f}")
        
        print(f"\nüí∞ Found {len(alternatives)} cheaper alternatives:")
        for i, alt in enumerate(alternatives, 1):
            print(f"   {i}. {alt.get('name', 'Unknown')}")
            print(f"      Price: ${alt.get('price', 0):.2f}")
            print(f"      Savings: ${alt.get('savings', 0):.2f} ({alt.get('savings_percentage', 0):.1f}%)")
            print(f"      Style Similarity: {alt.get('style_similarity', 0)*100:.1f}%")
            print()
    
    def _display_accessory_results(self, result: Dict[str, Any]):
        """Display accessory matching results"""
        clothing_item = result.get("clothing_item", {})
        accessories = result.get("matching_accessories", {})
        
        print(f"\nüìã Clothing Item: {clothing_item.get('name', 'Unknown')}")
        print(f"   Category: {clothing_item.get('category', 'Unknown')}")
        print(f"   Color: {clothing_item.get('color', 'Unknown')}")
        
        for accessory_type, items in accessories.items():
            print(f"\nüëú {accessory_type.title()} ({len(items)} items):")
            for i, item in enumerate(items, 1):
                print(f"   {i}. {item.get('name', 'Unknown')}")
                print(f"      Price: ${item.get('price', 0):.2f}")
                print(f"      Compatibility: {item.get('compatibility_score', 0)*100:.1f}%")
                if item.get('match_reasons'):
                    print(f"      Why it matches: {', '.join(item['match_reasons'])}")
                print()
    
    def _display_seasonal_results(self, result: Dict[str, Any]):
        """Display seasonal recommendations results"""
        season = result.get("season", "unknown")
        recommendations = result.get("top_recommendations", [])
        categorized = result.get("categorized_recommendations", {})
        
        print(f"\nüìã Season: {season.title()}")
        print(f"   Total Recommendations: {result.get('total_found', 0)}")
        print(f"   Average Trend Score: {result.get('average_trend_score', 0)*100:.1f}%")
        
        print(f"\nüî• Top {len(recommendations)} Seasonal Picks:")
        for i, rec in enumerate(recommendations, 1):
            print(f"   {i}. {rec.get('name', 'Unknown')}")
            print(f"      Category: {rec.get('category', 'Unknown')}")
            print(f"      Price: ${rec.get('price', 0):.2f}")
            print(f"      Trend Score: {rec.get('trend_score', 0)*100:.1f}%")
            if rec.get('seasonal_reasons'):
                print(f"      Why trending: {rec['seasonal_reasons'][0]}")
            print()
    
    def _display_style_results(self, result: Dict[str, Any]):
        """Display style evolution results"""
        original = result.get("original_product", {})
        evolved = result.get("style_evolved_products", [])
        target_style = result.get("target_style", "unknown")
        
        print(f"\nüìã Original Product: {original.get('name', 'Unknown')}")
        print(f"   Target Style: {target_style.title()}")
        print(f"   Transformation Intensity: {result.get('transformation_intensity', 0)*100:.1f}%")
        
        print(f"\n‚ú® Found {len(evolved)} style variations:")
        for i, item in enumerate(evolved, 1):
            print(f"   {i}. {item.get('name', 'Unknown')}")
            print(f"      Price: ${item.get('price', 0):.2f}")
            print(f"      Style Score: {item.get('style_score', 0)*100:.1f}%")
            if item.get('style_reasons'):
                print(f"      Style elements: {item['style_reasons'][0]}")
            print()
    
    def _show_mock_color_results(self):
        """Show mock color variation results"""
        print("\nüìã Reference Product: Classic Leather Scarves")
        print("   Original Color: Navy")
        print("   Price: $506.12")
        
        print("\nüé® Found 3 color variations:")
        mock_results = [
            {"name": "Classic Leather Scarves - Crimson", "color": "red", "price": 498.00, "similarity": 92},
            {"name": "Classic Leather Scarves - Forest", "color": "green", "price": 512.00, "similarity": 89},
            {"name": "Classic Leather Scarves - Charcoal", "color": "black", "price": 501.50, "similarity": 94}
        ]
        
        for i, item in enumerate(mock_results, 1):
            print(f"   {i}. {item['name']}")
            print(f"      Color: {item['color']}")
            print(f"      Price: ${item['price']:.2f}")
            print(f"      Similarity: {item['similarity']}%")
            print()
    
    def _show_mock_cheaper_results(self):
        """Show mock cheaper alternatives results"""
        print("\nüìã Luxury Product: Classic Leather Scarves")
        print("   Original Price: $506.12")
        print("   Max Target Price: $354.28")
        
        print("\nüí∞ Found 3 cheaper alternatives:")
        mock_results = [
            {"name": "Affordable Leather-Look Scarves", "price": 156.32, "savings": 349.80, "similarity": 85},
            {"name": "Budget Classic Scarves", "price": 89.99, "savings": 416.13, "similarity": 78},
            {"name": "Value Leather Scarves", "price": 245.00, "savings": 261.12, "similarity": 91}
        ]
        
        for i, item in enumerate(mock_results, 1):
            savings_pct = (item['savings'] / 506.12) * 100
            print(f"   {i}. {item['name']}")
            print(f"      Price: ${item['price']:.2f}")
            print(f"      Savings: ${item['savings']:.2f} ({savings_pct:.1f}%)")
            print(f"      Style Similarity: {item['similarity']}%")
            print()
    
    def _show_mock_accessory_results(self):
        """Show mock accessory matching results"""
        print("\nüìã Clothing Item: Classic Leather Scarves")
        print("   Category: accessories")
        print("   Color: navy")
        
        print("\nüëú Bags (2 items):")
        print("   1. Navy Leather Handbag")
        print("      Price: $285.00")
        print("      Compatibility: 93%")
        print("      Why it matches: Matching navy color, Perfect for Fall season")
        print()
        
        print("   2. Classic Tote Bag")
        print("      Price: $198.50")
        print("      Compatibility: 87%") 
        print("      Why it matches: Gender-appropriate styling")
        print()
        
        print("üë† Shoes (1 items):")
        print("   1. Navy Leather Boots")
        print("      Price: $350.00")
        print("      Compatibility: 95%")
        print("      Why it matches: Matching navy color, Perfect for Fall season")
        print()
    
    def _show_mock_seasonal_results(self, season: str):
        """Show mock seasonal recommendations"""
        print(f"\nüìã Season: {season.title()}")
        print("   Total Recommendations: 6")
        print("   Average Trend Score: 91.0%")
        
        print("\nüî• Top 3 Seasonal Picks:")
        mock_results = [
            {"name": "Cozy Fall Sweater", "category": "clothing", "price": 89.99, "trend_score": 94},
            {"name": "Autumn Leather Jacket", "category": "clothing", "price": 299.99, "trend_score": 91},
            {"name": "Fall Fashion Boots", "category": "shoes", "price": 199.99, "trend_score": 88}
        ]
        
        for i, item in enumerate(mock_results, 1):
            print(f"   {i}. {item['name']}")
            print(f"      Category: {item['category']}")
            print(f"      Price: ${item['price']:.2f}")
            print(f"      Trend Score: {item['trend_score']}%")
            print(f"      Why trending: Perfect for {season} season styling")
            print()
    
    def _show_mock_style_results(self):
        """Show mock style evolution results"""
        print("\nüìã Original Product: Classic Leather Scarves")
        print("   Target Style: Casual")
        print("   Transformation Intensity: 80%")
        
        print("\n‚ú® Found 3 style variations:")
        mock_results = [
            {"name": "Casual Cotton Scarves", "price": 45.99, "style_score": 89},
            {"name": "Relaxed Knit Scarf", "price": 32.50, "style_score": 92},
            {"name": "Everyday Lightweight Scarf", "price": 29.99, "style_score": 85}
        ]
        
        for i, item in enumerate(mock_results, 1):
            print(f"   {i}. {item['name']}")
            print(f"      Price: ${item['price']:.2f}")
            print(f"      Style Score: {item['style_score']}%")
            print("      Style elements: Embodies casual, relaxed style elements")
            print()
    
    def _get_current_season(self) -> str:
        """Get current season based on date"""
        month = datetime.now().month
        if month in [3, 4, 5]:
            return "spring"
        elif month in [6, 7, 8]:
            return "summer"
        elif month in [9, 10, 11]:
            return "fall"
        else:
            return "winter"
    
    async def run_all_demos(self):
        """Run all multi-modal search demos"""
        print("üöÄ MULTI-MODAL SEARCH ENHANCEMENT DEMO")
        print("=" * 50)
        print("Showcasing advanced vector search capabilities:")
        print("‚Ä¢ Find items that match this outfit but in a different color")
        print("‚Ä¢ Show me cheaper alternatives to this luxury item")
        print("‚Ä¢ Find accessories that go with this dress")
        print("‚Ä¢ Seasonal recommendations based on current trends")
        print("‚Ä¢ Style evolution (make this more casual/formal)")
        print("=" * 50)
        
        demos = [
            self.demo_color_variations,
            self.demo_cheaper_alternatives,
            self.demo_accessory_matching,
            self.demo_seasonal_recommendations,
            self.demo_style_evolution
        ]
        
        total_start = time.time()
        
        for demo in demos:
            try:
                await demo()
                print("\n" + "‚îÄ" * 50)
            except Exception as e:
                print(f"‚ùå Demo failed: {e}")
                print("\n" + "‚îÄ" * 50)
        
        total_elapsed = time.time() - total_start
        print(f"\nüéâ All demos completed in {total_elapsed:.2f} seconds!")
        print("\nüí° Integration Notes:")
        print("‚Ä¢ Vector embeddings enable semantic similarity search")
        print("‚Ä¢ Multi-modal capabilities combine text and image understanding")
        print("‚Ä¢ Advanced filtering preserves style while varying attributes")
        print("‚Ä¢ Real-time trend analysis for seasonal recommendations")
        print("‚Ä¢ Style transformation using vector space arithmetic")

async def main():
    """Main demo function"""
    parser = argparse.ArgumentParser(description="Multi-Modal Search Enhancement Demo")
    parser.add_argument("--api-url", default="http://localhost:8001", help="API base URL")
    parser.add_argument("--direct", action="store_true", help="Use direct service calls instead of HTTP API")
    parser.add_argument("--demo", choices=['color', 'cheaper', 'accessory', 'seasonal', 'style', 'all'], 
                       default='all', help="Which demo to run")
    
    args = parser.parse_args()
    
    demo = MultiModalSearchDemo(
        api_base_url=args.api_url,
        use_direct_service=args.direct
    )
    
    if args.demo == 'all':
        await demo.run_all_demos()
    elif args.demo == 'color':
        await demo.demo_color_variations()
    elif args.demo == 'cheaper':
        await demo.demo_cheaper_alternatives()
    elif args.demo == 'accessory':
        await demo.demo_accessory_matching()
    elif args.demo == 'seasonal':
        await demo.demo_seasonal_recommendations()
    elif args.demo == 'style':
        await demo.demo_style_evolution()

if __name__ == "__main__":
    asyncio.run(main())
